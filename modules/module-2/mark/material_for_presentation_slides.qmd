---
format: html
---

# Material to pull across to the presentation slides

## Lesson 1

This is based on MoqUps!

* What is process mapping

## Lesson 2

* What is a python virtual environment?
* What is OOP?

### Build a consent form

## Install reflex (if we have not already done this for the student)

* See [here](https://reflex.dev/docs/getting-started/installation/) for further details

```.bash
pip install reflex
```

## Change directory

```.bash
cd users/<your name>/module-2/
```

## Initialise the project

```.bash
reflex init
```

* Chose template 0

## Update port so you do not conflict with other people

/* TODO #1 We need to find a way to give everyone their own port

* add `frontend_port=<your port number>,` as line 5 below:

```{.python filename="rxconfig.py" code-line-numbers="true"}
import reflex as rx

config = rx.Config(
    app_name="module_2",
    frontend_port=3001,
)
```

## Run the app

```.bash
reflex run
```

* Press and hold on the CTRL/CMD key and click on http://localhost:<your port>, and this will open up your basic web app.
* You should see a browser that looks like this
<add picture of basic browser view>

## Start editing

* In the navigation window (the column on the left) open up `users/<your username>/modules/module-2/module-2/`.
* Open up the python file `module-2.py`.
* Delete the entire contents of the file and replace with the below code:

```{.python filename="module-2.py" code-line-numbers="true"}
from rxconfig import config

import reflex as rx

@rx.page(title="Consent form")
def index():
    return rx.center(
        rx.vstack(
            rx.box(
                rx.heading("My digital consent form", font_size="2em"),
                padding_top="20px",
            ),
            rx.text("This is where I build the consent form"),
            spacing="4",
        ),
        width="100%",
        justify_content="center",
        align_items="center",
    )


app = rx.App()
app.add_page(index)
```

* Likely we will need to explain what each line of code means.

* Wait for a new print out of `Compiling:...` to appear, and then you should see the results on your browser.

## Start adding



```{.python filename="module-2.py" code-line-numbers="true"}
@rx.page(title="Consent form")
def index():
    return rx.center(
        rx.vstack(
            rx.box(
                rx.heading("My digital consent form", font_size="2em"),
                padding_top="20px",
            ),
            rx.text("This is where I build the consent form"),
            spacing="4",
        ),
        width="100%",
        justify_content="center",
        align_items="center",
    )
```

* You might have to restart `Reflex` when you add the Forms class. Stop Reflex with `CTRL-C`.

## First form

* Add a form class

```{.python filename="module-2.py" code-line-numbers="true"}
class FormState(rx.State):
    form_data: dict = {}

    def handle_submit(self, form_data: dict):
        """Handles the form submit."""
        self.form_data = form_data
```

* Add the form to the index page with results print out

```{.python filename="module-2.py" code-line-numbers="true"}
@rx.page(title="Consent form")
def index():
    return rx.center(
        rx.vstack(
            rx.box(
                rx.heading("My digital consent form", font_size="2em"),
                padding_top="20px",
            ),
            rx.text("This is where I build the consent form"),
            rx.form(
                rx.vstack(
                    rx.input(
                        placeholder="Test text...",
                        name="test_data",
                        max_length="100",
                        required=True,
                    ),
                    rx.button("Submit", type="submit"),
                    spacing="4",
                ),
                on_submit=FormState.handle_submit,
                reset_on_submit=True,
            ),
            rx.divider(),
            rx.heading("Results"),
            rx.text(FormState.form_data.to_string()),
            spacing="4",
        ),
        width="100%",
        justify_content="center",
        align_items="center",
    )
```

## Add a database

* Stop Reflex with `CTRL-C`.

```{.python filename="module-2.py" code-line-numbers="true"}
class User(rx.Model, table=True):
    username: str
    email: str
    password: str
```

* Make initialise the database

```.bash
reflex db init
```

* Update the alembic schema (after every database change)

```.bash
reflex db makemigrations --message 'started'  
```

* Make the migrations

```.bash
reflex db migrate
```